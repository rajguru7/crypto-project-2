#!/usr/bin/env python

import os
import subprocess
import argparse

def download_package(package_name):
    # Download the package
    subprocess.run(['pip', 'download', package_name, '--no-deps',
                    '--prefer-binary'], check=True)

    # Find the downloaded file
    package_name = package_name.replace('-', '_')
    downloaded_file = next(f for f in os.listdir() if (f.startswith(package_name) and f.endswith('.whl')))

    # Get the hash of the downloaded file
    result = subprocess.run(['pip', 'hash', downloaded_file], capture_output=True, text=True, check=True)
    actual_hash = result.stdout.split('--hash=sha256:')[1].strip()

    return (downloaded_file, actual_hash)

def upload_package(wheel_path):
    package_name = os.path.basename(wheel_path).split('-')[0]
    twine_command = ['twine', 'upload', wheel_path]
    subprocess.run(twine_command, check=True)

def main():
    parser = argparse.ArgumentParser(description='Piptuf CLI Tool')
    subparsers = parser.add_subparsers(dest='command', required=True)

    # Download command parser
    download_parser = subparsers.add_parser('download', help='Download a package with no dependencies')
    download_parser.add_argument('package_name', type=str, help='Name of the package to download')
    download_parser.add_argument('--secure', type=str, default='no', help='Secure download option')

    # Upload command parser
    upload_parser = subparsers.add_parser('upload', help='Upload a wheel file using twine')
    upload_parser.add_argument('package_name', type=str, help='Name of the package to upload')
    upload_parser.add_argument('wheel_path', type=str, help='Path to the wheel file')

    args = parser.parse_args()

    if args.command == 'download':
        downloaded_file, actual_hash = download_package(args.package_name)
        if args.secure == 'yes':
            secure = "claimed"
        else:
            secure = "unclaimed"
        subprocess.run(['./tuf/client/client', 'tofu'], check=True)
        expected_hash = subprocess.run(['./tuf/client/client', 'download',
                                        f"packages/{secure}/{args.package_name}/{downloaded_file}"],
                                       capture_output=True, text=True,
                                       check=True).stdout.strip()

        print(f"Expected hash: {expected_hash}")
        if actual_hash == expected_hash:
            print(f"Downloaded file {downloaded_file} is secure")
        else:
            print(f"Downloaded file {downloaded_file} is not secure")

    elif args.command == 'upload':

        whl_name = os.path.basename(args.wheel_path)

        subprocess.run(['./tuf/uploader/uploader', 'tofu'], check=True)
        subprocess.run(['./tuf/uploader/uploader', 'add-target',
                        f"{args.package_name}",
                        f"packages/unclaimed/{args.package_name}/{whl_name}", f"{args.wheel_path}"],
                       check=True)
        upload_package(args.wheel_path)

if __name__ == '__main__':
    main()
